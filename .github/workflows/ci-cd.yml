name: QuantFlow Multi-Project CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  HARBOR_REGISTRY: "10.47.1.106"
  HARBOR_PROJECT: "library"

jobs:
  build-datacollection:
    runs-on: self-hosted
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Verify .NET Installation
      run: dotnet --version
    
    - name: Build and Test DataCollection
      run: |
        cd QuantFlow.WorkerService.DataCollection
        dotnet restore
        dotnet build --no-restore
        # dotnet test --no-build --verbosity normal
    
    - name: Login to Harbor
      run: |
        echo "${{ secrets.HARBOR_PASSWORD }}" | docker login ${{ env.HARBOR_REGISTRY }} \
          --username "${{ secrets.HARBOR_USERNAME }}" --password-stdin
    
    - name: Build and Push DataCollection Image
      run: |
        IMAGE_TAG=${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/quantflow-datacollection:${{ github.sha }}
        IMAGE_LATEST=${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/quantflow-datacollection:latest
        
        docker build -f QuantFlow.WorkerService.DataCollection/Dockerfile -t $IMAGE_TAG -t $IMAGE_LATEST .
        docker push $IMAGE_TAG
        docker push $IMAGE_LATEST
        
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
    
    - name: Deploy DataCollection to Development
      if: github.ref == 'refs/heads/main'
      run: |
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        
        kubectl cluster-info
        
        IMAGE_TAG=${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/quantflow-datacollection:${{ github.sha }}
        
        kubectl set image deployment/quantflow-datacollection \
          quantflow-datacollection=$IMAGE_TAG \
          -n development || \
        kubectl create deployment quantflow-datacollection \
          --image=$IMAGE_TAG \
          -n development
        
        kubectl rollout status deployment/quantflow-datacollection -n development --timeout=300s

  build-discord:
    runs-on: self-hosted
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Verify .NET Installation
      run: dotnet --version
    
    - name: Build and Test Discord Bot
      run: |
        cd QuantFlow.WorkerService.Discord
        dotnet restore
        dotnet build --no-restore
        # dotnet test --no-build --verbosity normal
    
    - name: Login to Harbor
      run: |
        echo "${{ secrets.HARBOR_PASSWORD }}" | docker login ${{ env.HARBOR_REGISTRY }} \
          --username "${ secrets.HARBOR_USERNAME }}" --password-stdin
    
    - name: Build and Push Discord Bot Image
      run: |
        IMAGE_TAG=${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/quantflow-discord:${{ github.sha }}
        IMAGE_LATEST=${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/quantflow-discord:latest
        
        docker build -f QuantFlow.WorkerService.Discord/Dockerfile -t $IMAGE_TAG -t $IMAGE_LATEST .
        docker push $IMAGE_TAG
        docker push $IMAGE_LATEST
        
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
    
    - name: Deploy Discord Bot to Development
      if: github.ref == 'refs/heads/main'
      run: |
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        
        IMAGE_TAG=${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/quantflow-discord:${{ github.sha }}
        
        # Create Harbor registry secret if it doesn't exist
        kubectl create secret docker-registry harbor-registry \
          --docker-server=${{ env.HARBOR_REGISTRY }} \
          --docker-username="${{ secrets.HARBOR_USERNAME }}" \
          --docker-password="${{ secrets.HARBOR_PASSWORD }}" \
          -n development --dry-run=client -o yaml | kubectl apply -f -
        
        # Create deployment with proper configuration
        cat <<EOF | kubectl apply -f -
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: quantflow-discord
          namespace: development
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: quantflow-discord
          template:
            metadata:
              labels:
                app: quantflow-discord
            spec:
              imagePullSecrets:
              - name: harbor-registry
              containers:
              - name: quantflow-discord
                image: $IMAGE_TAG
                env:
                - name: ASPNETCORE_ENVIRONMENT
                  value: "Development"
                resources:
                  requests:
                    memory: "128Mi"
                    cpu: "100m"
                  limits:
                    memory: "256Mi"
                    cpu: "200m"
        EOF
        
        kubectl rollout status deployment/quantflow-discord -n development --timeout=300s

  build-api:
    runs-on: self-hosted
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Verify .NET Installation
      run: dotnet --version
    
    - name: Build and Test API
      run: |
        cd QuantFlow.Api.Rest
        dotnet restore
        dotnet build --no-restore
        # dotnet test --no-build --verbosity normal
    
    - name: Login to Harbor
      run: |
        echo "${{ secrets.HARBOR_PASSWORD }}" | docker login ${{ env.HARBOR_REGISTRY }} \
          --username "${{ secrets.HARBOR_USERNAME }}" --password-stdin
    
    - name: Build and Push API Image
      run: |
        IMAGE_TAG=${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/quantflow-api:${{ github.sha }}
        IMAGE_LATEST=${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/quantflow-api:latest
        
        docker build -f QuantFlow.Api.Rest/Dockerfile -t $IMAGE_TAG -t $IMAGE_LATEST .
        docker push $IMAGE_TAG
        docker push $IMAGE_LATEST
        
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
    
    - name: Deploy API to Development
      if: github.ref == 'refs/heads/main'
      run: |
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        
        IMAGE_TAG=${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/quantflow-api:${{ github.sha }}
        
        # Create Harbor registry secret if it doesn't exist
        kubectl create secret docker-registry harbor-registry \
          --docker-server=${{ env.HARBOR_REGISTRY }} \
          --docker-username="${{ secrets.HARBOR_USERNAME }}" \
          --docker-password="${{ secrets.HARBOR_PASSWORD }}" \
          -n development --dry-run=client -o yaml | kubectl apply -f -
        
        # Create deployment with proper configuration
        cat <<EOF | kubectl apply -f -
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: quantflow-api
          namespace: development
        spec:
          replicas: 2
          selector:
            matchLabels:
              app: quantflow-api
          template:
            metadata:
              labels:
                app: quantflow-api
            spec:
              imagePullSecrets:
              - name: harbor-registry
              containers:
              - name: quantflow-api
                image: $IMAGE_TAG
                ports:
                - containerPort: 8080
                env:
                - name: ASPNETCORE_ENVIRONMENT
                  value: "Development"
                - name: ASPNETCORE_URLS
                  value: "http://*:8080"
                resources:
                  requests:
                    memory: "256Mi"
                    cpu: "200m"
                  limits:
                    memory: "512Mi"
                    cpu: "500m"
                livenessProbe:
                  httpGet:
                    path: /health
                    port: 8080
                  initialDelaySeconds: 30
                  periodSeconds: 10
                readinessProbe:
                  httpGet:
                    path: /health
                    port: 8080
                  initialDelaySeconds: 5
                  periodSeconds: 5
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: quantflow-api-service
          namespace: development
        spec:
          selector:
            app: quantflow-api
          ports:
          - port: 80
            targetPort: 8080
            protocol: TCP
          type: ClusterIP
        ---
        apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          name: quantflow-api-ingress
          namespace: development
          annotations:
            nginx.ingress.kubernetes.io/rewrite-target: /
        spec:
          rules:
          - host: api-dev.quantflow.local
            http:
              paths:
              - path: /
                pathType: Prefix
                backend:
                  service:
                    name: quantflow-api-service
                    port:
                      number: 80
        EOF
        
        kubectl rollout status deployment/quantflow-api -n development --timeout=300s
