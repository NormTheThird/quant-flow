# .github/workflows/ci-cd.yaml
name: QuantFlow Multi-Project CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  HARBOR_REGISTRY: "10.47.1.106"
  HARBOR_PROJECT: "library"

jobs:
  detect-changes:
    runs-on: self-hosted
    outputs:
      datacollection: ${{ steps.changes.outputs.datacollection }}
      discord: ${{ steps.changes.outputs.discord }}
      api: ${{ steps.changes.outputs.api }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2
    
    - name: Detect changed projects
      id: changes
      run: |
        if git diff --name-only HEAD~1 HEAD | grep -E "^QuantFlow\.WorkerService\.DataCollection/|^\.github/workflows/" > /dev/null; then
          echo "datacollection=true" >> $GITHUB_OUTPUT
        else
          echo "datacollection=false" >> $GITHUB_OUTPUT
        fi
        
        if git diff --name-only HEAD~1 HEAD | grep -E "^QuantFlow\.WorkerService\.Discord/|^\.github/workflows/" > /dev/null; then
          echo "discord=true" >> $GITHUB_OUTPUT
        else
          echo "discord=false" >> $GITHUB_OUTPUT
        fi
        
        if git diff --name-only HEAD~1 HEAD | grep -E "^QuantFlow\.Api/|^\.github/workflows/" > /dev/null; then
          echo "api=true" >> $GITHUB_OUTPUT
        else
          echo "api=false" >> $GITHUB_OUTPUT
        fi

  build-datacollection:
    needs: detect-changes
    runs-on: self-hosted
    if: needs.detect-changes.outputs.datacollection == 'true' || github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Verify .NET Installation
      run: dotnet --version
    
    - name: Build and Test DataCollection
      run: |
        cd QuantFlow.WorkerService.DataCollection
        dotnet restore
        dotnet build --no-restore
        dotnet test --no-build --verbosity normal
    
    - name: Login to Harbor
      run: |
        echo "${{ secrets.HARBOR_PASSWORD }}" | docker login ${{ env.HARBOR_REGISTRY }} \
          --username "${{ secrets.HARBOR_USERNAME }}" --password-stdin
    
    - name: Build and Push DataCollection Image
      run: |
        IMAGE_TAG=${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/quantflow-datacollection:${{ github.sha }}
        IMAGE_LATEST=${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/quantflow-datacollection:latest
        
        docker build -f QuantFlow.WorkerService.DataCollection/Dockerfile -t $IMAGE_TAG -t $IMAGE_LATEST .
        docker push $IMAGE_TAG
        docker push $IMAGE_LATEST
        
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
    
    - name: Deploy DataCollection to Development
      if: github.ref == 'refs/heads/main'
      run: |
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        
        kubectl cluster-info
        
        IMAGE_TAG=${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/quantflow-datacollection:${{ github.sha }}
        
        kubectl set image deployment/quantflow-datacollection \
          quantflow-datacollection=$IMAGE_TAG \
          -n development || \
        kubectl create deployment quantflow-datacollection \
          --image=$IMAGE_TAG \
          -n development
        
        kubectl rollout status deployment/quantflow-datacollection -n development --timeout=300s

  build-discord:
    needs: detect-changes
    runs-on: self-hosted
    if: needs.detect-changes.outputs.discord == 'true' || github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Verify .NET Installation
      run: dotnet --version
    
    - name: Build and Test Discord Bot
      run: |
        cd QuantFlow.WorkerService.Discord
        dotnet restore
        dotnet build --no-restore
        # Skip tests if no test project exists yet
        # dotnet test --no-build --verbosity normal
    
    - name: Login to Harbor
      run: |
        echo "${{ secrets.HARBOR_PASSWORD }}" | docker login ${{ env.HARBOR_REGISTRY }} \
          --username "${{ secrets.HARBOR_USERNAME }}" --password-stdin
    
    - name: Build and Push Discord Bot Image
      run: |
        IMAGE_TAG=${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/quantflow-discord:${{ github.sha }}
        IMAGE_LATEST=${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/quantflow-discord:latest
        
        docker build -f QuantFlow.WorkerService.Discord/Dockerfile -t $IMAGE_TAG -t $IMAGE_LATEST .
        docker push $IMAGE_TAG
        docker push $IMAGE_LATEST
        
        echo "DISCORD_IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
    
    - name: Deploy Discord Bot to Development
      if: github.ref == 'refs/heads/main'
      run: |
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        
        kubectl cluster-info
        
        IMAGE_TAG=${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/quantflow-discord:${{ github.sha }}
        
        # Create secret for Discord token if it doesn't exist
        kubectl create secret generic discord-secrets \
          --from-literal=discord-token="${{ secrets.DISCORD_TOKEN }}" \
          -n development --dry-run=client -o yaml | kubectl apply -f -
        
        kubectl set image deployment/quantflow-discord \
          quantflow-discord=$IMAGE_TAG \
          -n development || \
        kubectl create deployment quantflow-discord \
          --image=$IMAGE_TAG \
          -n development
        
        # Add environment variable for Discord token
        kubectl patch deployment quantflow-discord -n development -p '{
          "spec": {
            "template": {
              "spec": {
                "containers": [{
                  "name": "quantflow-discord",
                  "env": [{
                    "name": "Discord__Token",
                    "valueFrom": {
                      "secretKeyRef": {
                        "name": "discord-secrets",
                        "key": "discord-token"
                      }
                    }
                  }]
                }]
              }
            }
          }
        }'
        
        kubectl rollout status deployment/quantflow-discord -n development --timeout=300s

  build-api:
    needs: detect-changes
    runs-on: self-hosted
    if: needs.detect-changes.outputs.api == 'true' || github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Build and Test API
      run: |
        echo "API project not yet implemented"
        # cd QuantFlow.Api
        # dotnet restore
        # dotnet build --no-restore
        # dotnet test --no-build --verbosity normal

  deploy-production:
    needs: [build-datacollection, build-discord]
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main' && (needs.build-datacollection.result == 'success' || needs.build-discord.result == 'success')
    environment: production
    
    steps:
    - name: Deploy DataCollection to Production
      if: needs.build-datacollection.result == 'success'
      run: |
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        
        IMAGE_TAG=${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/quantflow-datacollection:${{ github.sha }}
        
        kubectl set image deployment/quantflow-datacollection \
          quantflow-datacollection=$IMAGE_TAG \
          -n production || \
        kubectl create deployment quantflow-datacollection \
          --image=$IMAGE_TAG \
          -n production
        
        kubectl rollout status deployment/quantflow-datacollection -n production --timeout=300s
    
    - name: Deploy Discord Bot to Production
      if: needs.build-discord.result == 'success'
      run: |
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        
        IMAGE_TAG=${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/quantflow-discord:${{ github.sha }}
        
        # Create secret for Discord token if it doesn't exist
        kubectl create secret generic discord-secrets \
          --from-literal=discord-token="${{ secrets.DISCORD_TOKEN }}" \
          -n production --dry-run=client -o yaml | kubectl apply -f -
        
        kubectl set image deployment/quantflow-discord \
          quantflow-discord=$IMAGE_TAG \
          -n production || \
        kubectl create deployment quantflow-discord \
          --image=$IMAGE_TAG \
          -n production
        
        # Add environment variable for Discord token
        kubectl patch deployment quantflow-discord -n production -p '{
          "spec": {
            "template": {
              "spec": {
                "containers": [{
                  "name": "quantflow-discord",
                  "env": [{
                    "name": "Discord__Token",
                    "valueFrom": {
                      "secretKeyRef": {
                        "name": "discord-secrets",
                        "key": "discord-token"
                      }
                    }
                  }]
                }]
              }
            }
          }
        }'
        
        kubectl rollout status deployment/quantflow-discord -n production --timeout=300s
